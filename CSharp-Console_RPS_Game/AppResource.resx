<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="1" xml:space="preserve">
    <value>
    88
  ,d88
888888
    88
    88
    88
    88
    88

</value>
  </data>
  <data name="2" xml:space="preserve">
    <value>
.d888b.
VP  `8D
   odD'
 .88'
j88.
888888D
</value>
  </data>
  <data name="3" xml:space="preserve">
    <value>
d8888b.
VP  `8D
  oooY'
  ~~~b.
db   8D
Y8888P'
</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="bg_music" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\bg_music.wav;System.IO.MemoryStream, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="Bye" xml:space="preserve">
    <value>
d8888b. db    db d88888b
88  `8D `8b  d8' 88'
88oooY'  `8bd8'  88ooooo
88~~~b.    88    88~~~~~
88   8D    88    88.
Y8888P'    YP    Y88888P
</value>
  </data>
  <data name="Conclusion" xml:space="preserve">
    <value>
.o88b.  .d88b.  d8b   db  .o88b. db      db    db .d8888. d888888b  .d88b.  d8b   db
d8P  Y8 .8P  Y8. 888o  88 d8P  Y8 88      88    88 88'  YP   `88'   .8P  Y8. 888o  88
8P      88    88 88V8o 88 8P      88      88    88 `8bo.      88    88    88 88V8o 88
8b      88    88 88 V8o88 8b      88      88    88   `Y8b.    88    88    88 88 V8o88
Y8b  d8 `8b  d8' 88  V888 Y8b  d8 88booo. 88b  d88 db   8D   .88.   `8b  d8' 88  V888
 `Y88P'  `Y88P'  VP   V8P  `Y88P' Y88888P ~Y8888P' `8888Y' Y888888P  `Y88P'  VP   V8P
</value>
  </data>
  <data name="Hint" xml:space="preserve">
    <value>
db   db d888888b d8b   db d888888b
88   88   `88'   888o  88 `~~88~~'
88ooo88    88    88V8o 88    88
88~~~88    88    88 V8o88    88
88   88   .88.   88  V888    88
YP   YP Y888888P VP   V8P    YP
</value>
  </data>
  <data name="Invalid" xml:space="preserve">
    <value>
d888888b d8b   db db    db  .d8b.  db      d888888b d8888b.
  `88'   888o  88 88    88 d8' `8b 88        `88'   88  `8D
   88    88V8o 88 Y8    8P 88ooo88 88         88    88   88
   88    88 V8o88 `8b  d8' 88~~~88 88         88    88   88
  .88.   88  V888  `8bd8'  88   88 88booo.   .88.   88  .8D
Y888888P VP   V8P    YP    YP   YP Y88888P Y888888P Y8888D'
</value>
  </data>
  <data name="Paper" xml:space="preserve">
    <value>
d8888b.  .d8b.  d8888b. d88888b d8888b.
88  `8D d8' `8b 88  `8D 88'     88  `8D
88oodD' 88ooo88 88oodD' 88ooooo 88oobY'
88~~~   88~~~88 88~~~   88~~~~~ 88`8b
88      88   88 88      88.     88 `88.
88      YP   YP 88      Y88888P 88   YD
</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>
d888b  d88888b d888888b      d8888b. d88888b  .d8b.  d8888b. db    db
88' Y8b 88'     `~~88~~'      88  `8D 88'     d8' `8b 88  `8D `8b  d8'
88      88ooooo    88         88oobY' 88ooooo 88ooo88 88   88  `8bd8'
88  ooo 88~~~~~    88         88`8b   88~~~~~ 88~~~88 88   88    88
88. ~8~ 88.        88         88 `88. 88.     88   88 88  .8D    88
 Y888P  Y88888P    YP         88   YD Y88888P YP   YP Y8888D'    YP
</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>
88888888ba   88888888888  ad88888ba   88        88  88      888888888888
88      "8b  88          d8"     "8b  88        88  88           88
88      ,8P  88          Y8,          88        88  88           88
88aaaaaa8P'  88aaaaa     `Y8aaaaa,    88        88  88           88
88""""88'    88"""""       `"""""8b,  88        88  88           88
88    `8b    88                  `8b  88        88  88           88
88     `8b   88          Y8a     a8P  Y8a.    .a8P  88           88
88      `8b  88888888888  "Y88888P"    `"Y8888Y"'   88888888888  88
</value>
  </data>
  <data name="Rock" xml:space="preserve">
    <value>
d8888b.  .d88b.   .o88b. db   dD
88  `8D .8P  Y8. d8P  Y8 88 ,8P'
88oobY' 88    88 8P      88,8P
88`8b   88    88 8b      88`8b
88 `88. `8b  d8' Y8b  d8 88 `88.
88   YD  `Y88P'   `Y88P' YP   YD
</value>
  </data>
  <data name="Scissors" xml:space="preserve">
    <value>
.d8888.  .o88b. d888888b .d8888. .d8888.  .d88b.  d8888b. .d8888.
88'  YP d8P  Y8   `88'   88'  YP 88'  YP .8P  Y8. 88  `8D 88'  YP
`8bo.   8P         88    `8bo.   `8bo.   88    88 88oobY' `8bo.
  `Y8b. 8b         88      `Y8b.   `Y8b. 88    88 88`8b     `Y8b.
db   8D Y8b  d8   .88.   db   8D db   8D `8b  d8' 88 `88. db   8D
`8888Y'  `Y88P' Y888888P `8888Y' `8888Y'  `Y88P'  88   YD `8888Y'
</value>
  </data>
  <data name="Setup" xml:space="preserve">
    <value>
.d8888. d88888b d888888b db    db d8888b.
88'  YP 88'     `~~88~~' 88    88 88  `8D
`8bo.   88ooooo    88    88    88 88oodD'
  `Y8b. 88~~~~~    88    88    88 88~~~
db   8D 88.        88    88b  d88 88
`8888Y' Y88888P    YP    ~Y8888P' 88
</value>
  </data>
</root>